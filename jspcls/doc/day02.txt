# day02

JSP란?
==> Java Server Page 의 약자로
	Web 서버가 클라이언트에게 응답하기 위해 필요한 문서(html)를 
	만들어주는 언어의 일종이다.
	
	Web Server가 가진 엔진이 실행할 수 있는 언어가 따로 있다.
	이것을 우리는 Server Side Page(SSP)라고 말한다.
	
	종류 ]
		
		ASP(Active Server Page)
			==> Visual Basic 이라는 언어를 기본
		ASP.NET
			==> C# 언어를 기본
		PHP
			==> CGI라는 언어를 배경으로 해서 만들어진 새로운 언어
		JSP
			==> Java 를 기본 언어로 사용
			
	결론 ]
		우리가 배울 내용은
		서버가 실행해서 클라이언트에게 응답 하는 
		응답 문서를 만들기 위한 언어를 배우는 것이다.
		
		즉, 서버가 실행할 수 있는 프로그램을 만드는 것이고
		그 결과는 문서(파일로 탄생...)
		그 파일의 결과는 반드시 클라이언트의 웹 브라우저를 이용해서 테스트가 이루어져야 한다.
		
-----------------------------------------------------------------------------------------------
프로젝트의 폴더 구조
	
	Java Resources
	==> JSP가 사용할 자바적인 요소(클래스)를 코딩하는 위치
		Java Resources/src/ 하위에 패키지를 만들고
		그 내부에 필요한 클래스를 작성하면 된다.
		
	WebContent
	==> 실제 JSP, HTML, JavaScript, CSS 등 응답에 필요한 문서를 작성하는 위치
		
		웹서버에 직접 문서를 요청해서 응답할 수 있는 위치
	
	WebContent/WEB-INF	
	==> Servlet 프로그램에 의해서 요청하는 문서가 놓이는 위치
	
	
-------------------------------------------------------------------------------------------------

xml 파일
	
	eXtension Markup Language 의 약자
	: 번역하자면 확장성이 있는 마크업 언어
	
	태그를 이용해서 파일의 내용을 구분하도록 만들어지는 문서를 말하며
	이중에 한가지가 HTML 문서이다.
	
	이때 HTML의 경우는 
	사용하는 태그가 이미 결정이 되어있다.(<== W3.org )
	
	그런데 xml은 태그의 종류를 정한 후
	그 태그를 이용해서 문서를 만드는 것을 말한다.
	
	이 문서는 주로 프로그램의 환경 설정을 하기 위한 목적으로 많이 사용하는 문서이다.
	
	프로그램은 해당 프로그램이 실행되기 전에
	먼저 xml 파일을 읽은 후
	그파일의 태그를 분석한다.
	==> 이 분석작업을 우리는 파싱한다. 라고 이야기 한다.
	
	그리고 파신된 결과를 프로그램에서 이용하도록 하는 과정을 거친다.
	
	***
	결론적으로 어떤 프로그램의 실행 환경(시작환경)을 바꾸고 싶다면
	xml 파일에서 그 환경을 설정하는 부분을 찾아서 수정하면 된다.
	
	참고 ]
		
		파싱을 하기 위해서는 그 xml 문서에 있는 태그의 의미를 알아야 한다.
		xml 문서를 만드는 사람이 태그의 순서, 의미를 지정하는 문서가 따로 있다.
		이 문서를 "DTD" 또는 "schema" 문서라고 한다.
		
		
-----------------------------------------------------------------------------------------------
JSP 구조
	
	JSP는 응답문서(주로 HTML문서)를 만들기 위한 언어의 일종이다.
	
	따라서 HTML문서가 중심이 된다.
	(구조가 HTML 문서의 구조형식을 따른다.)
	그리고 그 가운데 필요하면 자바적인 요소가 포함 될 수 있다.
	따라서 결론적으로 JSP는 자바적인 요소를 포함할 수 있는 스크립트 언어이다.
	
	HTMP과 차이점
	HTML은 서버측에서 실행이 불가능하고 오직 클라이언트(웹 브라우저) 측에서 실행이 가능한 언어이다.
	==> 오직 이미 준비된 문서를 단순히 응답하는 것일 뿐이고 
		내용을 변경 시킬 수 없다.
		
	JSP는 서버측에서 실행할 수 있는 언어이다.
	==> 요청이 올때마다 서버측에서 실행을 해서
		새로운 HTML문서를 제작할 수 있다.
		따라서 요청이 올 때마다 내용을 변경시킬 수 있다.
		
---------------------------------------------------------------------------------------------
	JSP 구조에서 반드시 알아야 할 내용
		==> 자바적인 요소를 어떤 방식으로 HTML 문서에 포함시킬 것인지...
		
		
	지시자
	==> JSP 문서의 특성이나 처리방식을 지시하는 명령을 말한다.
		
		형식 ]
			
			<%@ 명령어 속성="값" 속성="값" ... %>
			
			명령어의 종류 ]
				
				page	- 문서 자체의 특성이나 처리 방식을 지시하는 명령
				include - 문서 안에 다른 문서를 포함하도록 지시하는 명령
				taglib	- 사용자가 제작한 태그를 사용할 수 있도록 선언하는 명령
				
				
			1. page 명령
				==> 지금 만들고 있는 문서 자체에 특성이나 처리 방식을 지시하는 명령
				
				형식 ]
					
					<%@ page 속성="값" 속성="값" ... %>
					
					참고 ]
						속성 	: 지정하고 싶은 특성이나 처리방식에 대한 예약된 단어
						값 	: 그 특성이나 처리방식에 대한 내용
						
				속성 종류 ]
					
					1) language
						==> 스크립트할 언어의 종류를 지정하는 속성
							지금까지는 오직 Java만 허락하는 상태이다.
							생략하면 자동으로 자바 언어를 스크립트 해준다.
							
						예 ]
							<%@ page language="java" %>
							
					2) extends
						==> JSP는 실행을 하면 내부적으로 자바 클래스로 바뀌어서 실행하도록 되어있다.
							( 즉, 중간단계의 언어로 바뀐 상태에서 실행을 하므로
								ASP, PHP 보다 실행속도가 빠르다는 장점을 가지고 있다.)
								
							이때 중간에서 만들어지는 클래스가 어떤 클래스를 상속 받아서 만들어질지를 지정하는 속성이다.
							
							그런데 
							이미 JSP문서가 클래스로 변환될 때
							HttpJspBase 클래스를 상속 받도록 약속해 놓았다.
							
							따라서
							자바는 다중상속이 불가능하므로 필요없는 속성이다.
							생략하면 자동으로 HttpJspBase 클래스를 상속받게 된다.
							
						예 ]
							<%@ page extends="javax.servlet.jsp.HttpJspBase" %>
					
					*
					3) import
						==> 스크립트 안에 자바적인 요소를 넣을 수 있는데
							이때 사용하는 자바적인 요소가 특정 패키지 소속이면
							자바와 동일하게 반드시 import 해줘야 한다.
							그 작업을 해주는 속성
							
						예 ]
							
							<%@ page import="java.util.*" %>
							
							참고로 여러개를 import 해야할 경우 하나씩 따로 해줘도 상관 없고
							여러개를 한번에 import 해도 된다.
							<%@ page import="java.uitl.*, java.text.*" %>
					
					4) session
						==> 세션의 사용 여부를 판단하도록 하는 지시어
							생략하면 세션을 사용하도록 한다.(기본이 true 이다.)
							
						예 ]
							<%@ page session="true" %>
					
					*
					5) buffer
						==> 내부적으로 버퍼를 사용할 지 여부와
							버퍼의 크기를 얼마로 할지 여부를 지정하는 지시어
							생략하면 기본적으로 8KByte를 버퍼로 사용하도록 해준다.
							
						예 ]
							
							<%@ page buffer="none" %>
							==> 버퍼를 사용하지 않겠다는 선언
							
							<%@ page buffer="16K" %>
							==> 버퍼를 사용하는데 16KByte를 사용하겠다 라는 선언
							
						버퍼란 ?
							클라이언트엑세 서버가 응답할 때 처리 속도를 빠르게 하기 위해서
							중간에 버퍼를 이용해서 데이터를 모았다가 한번에 출력하는 개념이다.
							
					6) autoFlush
						==> 자동 Flush 기능을 사용할지 여부를 지정하는 지시어
							생략하면 true로 지정이되고
							자동 flush 기능이 실행된다.
							
						예 ]
							<%@ page autoFlush="true" %>
							
						참고 ]
							만약 false 로 지정하면
							강제로 반드시 flush를 시켜 줘야 한다.
							
					7) isThreadSafe
						==> 스레드 처리를 할 때 동기화 처리 여부를 지정하는 지시어
							생략하면 자동 동기화 처리로 지정된다.
							
						예 ]
							<%@ page isThreadSafe="true" %>
							
						참고 ]
							JSP의 모든 문서는 자동 스레드 처리가 된다.
							즉, 여러 클라이언트가 동시에 접속을 하더라도
							스레드 처리를 해서 응답하도록 되어있다.
							
					8) info
						==> 주석문에 해당하는 것으로
							실행에는 아무런 상관이 없고
							문서에 대한 정보(주석)를 작성할 때 사용하는 지시어
							
						예 ]
							<%@ page info="이 문서는 JSP 두번째날 수업내용..." %>
							
					*
					9) errorPage
						==> JSP문서를 실행하는 도중 문제(Exception)가 발생하면
							그 문서로는 응답을 할 수 없다.
							따라서 대신 응답할 다른 문서를 지정하는 지시어
							
						예 ]
							<%@ page errorPage="clsError.jsp" %>
							==> 이 문서 실행중 에러가 발생하면 clsError.jsp 파일로
								클라이언트에게 대신 응답하세요.
								
					10) isErrorPage
						==> 작성하는 문서가 에러 페이지용 문서인지를 지정하는 지시어
						
						예 ]
							<%@ page isErrorPage="true" %>
					
					***
					11) contentType
						==> 실행 결과의 응답 방식을 지정하는 지시어
							
							참고 ]
								실행 결과 탄생하는 문서의 종류를 지정할 수 있다.
								이때 응답 문서의 종류는 MIME Type으로 지정해야 한다.
								
						예 ]
							<%@ page contentType="text/html" %>
							==> 응답문서의 종류를 HTML 문서로 만들어라....
							
						참고 ]
							이 속성은 한글 인코딩방식도 같이 지정할 수 있다.
							형식 ]
								
								<%@ page contentType="text/html; charset=UTF-8" %>
								
							참고 ]
								이 속성은 매우중요한 속성으로
								생략하면 일반 text 문서로 응답하게 된다.
								따라서 반드시 지정해야 하는 유일한 속성이다.
					
					12) pageEncoding
						==> 한글 인코딩 방식을 지정하는 지시어이다.
						
						예 ]
							<%@ page pageEncoding="UTF-8" %>
							
						참고 ]
							contentType에서 한글 인코딩을 지정할 수 있으므로
							생략해도 무방하다.
							
----------------------------------------------------------------------------------------------
	2. include
		==> 다른 문서를 현재 재작하는 문서에 포함시키는 기능을 가진 지시어
			따라서 하나의 파일로 만드는 기능
			
		형식 ]
			
			<%@ include file="파일이름" %>
			
		참고 ]
			우리가 웹페이지를 제작하다보면 여러페이지에 같은 내용이 중복되어서 들어가는 경우가 있다.
			(예를 든다면 메뉴 태그들...)
			
			하지만 원칙적으로 JSP문서가 만든 결과를 응답하기 때문에(문서하나만 응답하기 때문에)
			매 문서마다 동일한 내용이라도 써주어야 한다.
			
			이런 불편함을 조금이나마 덜기 위한 방법으로 제시된 지시어
			
		결론 ]
			자주 사용되는 내용은 따로 만들어 놓고
			응답 문서에 따로 만들어진 파일을 합쳐서 하나의 문서로 만드는 방법
			
		**
		이 작업은 먼저 합치고(하나의 문서로 만들고) 컴파일을 한다.(.class 파일을 만든다.)
		만약 먼저 합쳤을 때 문제가 생기면(충돌이 나면) 에러가 발생한다.
		
------------------------------------------------------------------------------------------------

스크립트 방식
==> JSP 는 HTML 언어가 기본이 되고 필요하면 자바언어를 필요한 위치에 삽입하여 같이 실행하는 문서이다.
	이처럼 다른 언어에 포함하여 처리하는 방식을
	스크립트 방식이라고 하며
	JSP문서에 자바 언어를 삽입하는 방식은 다음 3가지 방식이 있다.
	
	1. 스크립트 릿 방식
		==> 일반적인 자바 언어를 포함하는 방식을 의미한다.
			이곳에 기록한 모든 내용은 service 함수 안에 포함된다.
			따라서 이곳은 결국 지역적인 역할을 한다.
			
		참고 ]
			어차피 JSP 문서는 여러 문서가 같이 실행되는 것이 아니고
			클라이언트가 요청한 문서 하나만 실행되므로
			클래스가 연결되어서 실행되는 경우는 거의 없다.
			결론적으로 main 함수만 있으면 충분하게 그 역할을 한다.
			
		참고 ]
			JSP 문서는 실행을 하면
			먼저 자바 클래스(.java 파일)로 변환을 하고
			그것을 컴파일해서(.class) 실행하는 방식이다.
			이런 클래스를 우리는 서블릿 클래스라고 부른다.
			이때 이것 역시 자바의 main 함수처럼 시작함수가 존재하는데
			그 함수의 이름이 service함수 이다.
			
		스크립트 릿 방식 사용형식 ]
		
			<%
				자바 소스 코드
			%>
			
		참고 ]
			스크립트 릿 속에 있는 내용과 html 내용은 같이 service 함수에 코딩이 된다.
			따라서 두가지는 혼용해서 사용할 수 있다.
			다만 자바적인 요소와 html 적인 요소를 구분만 해주면 된다.
	
	2. 선언자 방식
		=> JSP는 service 함수 안에서 거의 모든 것이 실행이 된다.
			하지만 가끔은 전역변수나 함수가 필요한 경우가 발생한다.
			이때, 전역변수나 함수를 만드는 방식이 선언자 방식이다.
			
		결론적으로
			전역변수와 함수를 만드는 기능을 가진 스크립트 방식
			(이 안에는 일반적인 명령은 사용할 수 없다.)
			
		형식 ]
			
			<%!
				변수선언
				함수제작
			%>
	
	3. 표현자 방식
		==> System.out.println()와 같이 같이
			자바적인 요소(변수, 함수의 실행결과)를 화면에 출력하기 위한 스크립트이다.
			
		형식 ]
			
			<%= 출력내용 %>
		
		주의 사항 ]
		
			출력내용은 오직 한개만 출력할 수 있다.
			이것은 println()과 동일하다.
			==> 문자열 결합을 해서 하나의 문자열로 만들어서
				여러개의 데이터를 출력하면 된다.
		
	참고 ]
	
		주석문
			1. 확장자가 html인 문서 : <!-- 내용 -->
			2. 확장자가 jsp인 문서 :
				
				1) html 코드 부분에서는
					<%-- 내용 --%>
				
				2) 자바적인 요소 부분에서는
					/* 내용 */ -- 멀티라인
					// 내용 -- 단일행 주석
					
			
			
---------------------------------------------------------------------------------------------
		

		
		