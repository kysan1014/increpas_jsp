# day05

디스패치 서블릿
==> 디스패치 서블릿은 하나의 WAS(web application server)의 역할을 하는 것으로
	클라이언트의 요청을 분석해서 그 결과를 이용해서
	원하는 작업(원하는 컨트롤러)를 실행할 수 있도록
	컨트롤 타워 역할을 하는 것이다.
	
	결론 ]
		request 객체는 클라이언트의 요청에 대한 정보를 관리하는 객체이다.
		이 객체를 이용하면 클라이언트의 요청을 알아낼 수 있으며
		이것을 이용해서 클라이언트가 무엇을 요청했는지 알 수 있게 된다.
		
----------------------------------------------------------------------------
커넥션 풀(Connection Pool)
	데이터베이스에 접속하는 커넥션을 모아놓은 것(DataSource)
	
	웹 서버(톰캣)이 시작될 때 데이터베이스가 제공하는 모든(필요한 만큼의) 커넥션을 미리 만들어 놓은 후
	필요하면 만들어 놓은 커넥션을 제공하는 기법
	
	따라서 요청할 때 마다 다시 데이터베이스에 접속하는 상황이 벌어지지 않으므로
	좀 더 빠르게 데이터베이스 작업을 할 수 있게 된다.
	
	필요한 이유
		데이터베이스를 사용할 때 가장 시간이 많이 걸리고
		부하가 많이 걸리는 작업이 바로 데이터베이스에 접속하는 시점이다.
		따라서 접속과 단절이 빈번하면 그만큼 시스템은 많은 시간 소모와 자원 소모를 가져오게 된다.
		
		예를 들어 우리가 어떤 홈페이지에 접속 했을 때
		가끔 응답 속도가 느린 이유는 90%가 데이터베이스 작업에서 문제가 생겼기 때문이다.
		
		하지만 우리가 지금까지 공부한 방법은
		누군가 요청하면 그 순간에 데이터베이스에 접속을 해서
		작업한 후 다시 닫아버리는 방식으로 작업을 했었다.
		
		따라서 많은 접속자가 있는 경우에는 문제가 발생할 수 있게된다.
		
	커넥션 풀 사용 방법
		==> 금요일 수업 소스코드 context.xml과 ClsDBCP를 참조하시기 바랍니다.
		
참고 ]
	과거에는 커넥션 풀을 위한 라이브러리를 다운을 받고 설치해줘야 했었다.
	6버젼 이상부터는 jdbc 라이브러리와 통합해서 제공되고 있다.
	만약 이전버젼을 사용하려면
		commons.dbcp-x.x.jar
		commons.pool-x.x.jar
	두개의 파일을 다운받아서 설치해줘야 사용가능해진다.
	
------------------------------------------------------------------------------------
JSTL(Java Standard Tag Library)
==> JSP를 제작하다보면 HTML과 자바가 혼용되어 만들어진다.
	따라서 자바적인 내용을 입력하는 경우 스크립트 릿(<% %>)을 사용해서 입력하게 된다.
	==> 이것은 개발자가 뷰 문서를 제작할 때 항상 고민거리이다.
	
	JSTL이란?
	JSP는 HTML(태그를 이용한 문서작업)이 우선되므로
	자바적인 요소 역시 태그 형식으로 사용할 수 있도록 해서
	(==> 문서를 작성하는 사람이 한가지 형식으로만 만들수 있게 되므로)
	통일되 방식으로 문서를 만들 수 있도록 만들어 놓은 라이브러리이다.
	
	
	예 ]
		금요일 까지 수업내용에는
			<%
				for(int i = 0 ; i < list.size(); i++){
			%>
				HTML태그
			<%
				}
			%>
		
		JSTL에서는
			<c:forEach var="data" items="${LIST}">
				HTML태그
			</c:forEach>
			
--------------------------------------------------------------------------------
JSTL 사용 방법
	1. JSTL 라이브러리를 다운 받아서 프로젝트의
		/WEB-INF/lib/ 아래에 복사해 놓는다.
		
		jstl-1.2.jar, standard.x.x.jar
		두개를 다운 받아서 복사해 둔다.
		
	2. jsp 파일에 <%@ page language="java" .... %> 아래쪽에
		<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
		를 추가해준다.
		
--------------------------------------------------------------------------------
JSTL 의 종류
	*****
	1. Core tag
		==> 일반적이니 자바 명령을 태그로 만들어 놓은 라이브러리
		
	2. Formatting tag
		==> 출력할 때 모양을 지정하기 위한 기능을 태그로 만들어 놓은 라이브러리
	
	*	
	3. Function tag
		==> 자바에서 자주사용하는 함수를 사용할 수 있도록 만들어 놓은 라이브러리
		
	4. SQL tag
		==> 데이터베이스를 사용할 수 있도록 필요한 기능을 태그로 만들어 놓은 라이브러리
		
	5. XML tag
		==> XML 문서 처리를 위한 기능을 태그로 만들어 놓은 라이브러리
		
		
사용 형식 ]
	
	<%@ taglib prefix="XXX" uri="???" %>
	
	prefix	-	아무것이나 써도 된다.
				이것의 의미는
				taglib는 누군가 만들어 놓은 태그를 사용하도록 하는 명령이다.
				이때 자바는 오픈소스이므로 아무나 만들 수 있고 배포도 가능하다.
				
				이때 문제점은
					태그의 이름이 중복이 될 수 있다.
					
				따라서 태그를 사용하는 사용자가 각각의 태그를 구분하기 위해서 부여한 자신만의 규칙으로
				"접두어" 라고 표현할 수 있다.
				
	uri		-	이 태그 라이브러리를 제공하는 CDN 네트워크 경로 
				또는 
				태그 라이브러리 기능을 제공하는 클래스 이름을 지정하는 부분이다.
				
				
불문율 ]
	
	1. Core
		<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
	
	2. Formatting
		<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
	
	3. Function
		<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
	
	4. SQL
		<%@ taglib prefix="sql" uri="http://java.sun.com/jsp/jstl/sql" %>
	
	5. xml
		<%@ taglib prefix="x" uri="http://java.sun.com/jsp/jstl/xml" %>
	
--------------------------------------------------------------------------------
표현식(Expression Language : EL)
	
	형식 ]
		
		${출력내용}
		
	의미 ]
		출력내용을 화면에 출력한다.
		출력내용은 변수, 연산식, 상수등 모든 것이 올 수 있다.
		<%=출력내용%>와 비슷한 역할
		
	참고 ]
		주로 사용하는 방법은
		요청객체에 속성을 추가해두고
		그 속성을 꺼내와서 출력하는 방법으로 사용한다.
		
		
	참고 ]
		EL 객체 
			
			1. requestScope	- *
			2. responseScope
			3. sessionScope	- *
			4. param
				${param.키값}
				
			***	
			* 는 소속을 밝혀주지 않고 키값만으로 사용해도 된다.
-------------------------------------------------------------------------------
		
1. <c:forEach>
	
	형식 1 ]
		
		<c:forEach var="변수" begin="시작" end="종료" step="증감값">
		
		</c:forEach>
		
		주의 ]
			
			end : 종료값도 포함이 된다.
			
		참고 ]
			step이 1인 경우는 생략해도 된다.
			
	형식 2 ]
		
		<c:forEach var="변수" items="컬렉션 또는 배열">
		</c:forEach>
		
		==> 자바의 향상된 for 명령과 같이 작동한다.
				
			
			
			
	
		







